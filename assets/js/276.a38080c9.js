(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{569:function(t,s,e){"use strict";e.r(s);var a=e(10),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"setup-electrumx-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setup-electrumx-server"}},[t._v("#")]),t._v(" Setup ElectrumX Server")]),t._v(" "),s("p",[t._v('An SPV Electrum Server is a server that provides "lite mode" type functionality. These servers run a full node, which maintains a copy of a blockchain\'s history (a.k.a.) "native mode". The electrum software allows developers and apps like AtomicDEX to communicate with the blockchain to query balances, transaction history or broadcast signed transactions without needing to download and sync the full chain locally.')]),t._v(" "),s("p",[t._v("A list of known electrum servers is maintained at https://github.com/KomodoPlatform/coins/tree/master/electrums\nIt's recommended to run at least 2 - 3 electrum servers to ensure stable operation.")]),t._v(" "),s("p",[t._v("Check out the "),s("a",{attrs:{href:"https://electrumx.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ElectrumX Docs"),s("OutboundLink")],1),t._v(" for more info.")]),t._v(" "),s("h2",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" python3-setuptools python3-multidict python3.8 libleveldb-dev\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/KomodoPlatform/electrumx-1\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/electrumx-1\npip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\npip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" ."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("uvloop,ujson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"coin-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#coin-configuration"}},[t._v("#")]),t._v(" Coin Configuration")]),t._v(" "),s("p",[t._v("If you are launching the electrum server for a new smartchain, you will have to add it to the "),s("code",[t._v("~/electrumx-1/electrumx/lib/coins.py")]),t._v(" file. You can skip this step if seeting up an electrum server for KMD or another coin which already exists in this file.")]),t._v(" "),s("p",[t._v("For example, using the RICK Smart Chain:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KomodoMixin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EquihashMixin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Coin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rick"')]),t._v("\n    SHORTNAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RICK"')]),t._v("\n    NET "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mainnet"')]),t._v("\n    TX_COUNT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("55000")]),t._v("\n    TX_COUNT_HEIGHT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42000")]),t._v("\n    TX_PER_BLOCK "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    RPC_PORT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28762")]),t._v("\n    REORG_LIMIT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),t._v("\n    PEERS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("NAME")]),t._v(", "),s("code",[t._v("SHORTNAME")]),t._v(" and "),s("code",[t._v("RPC_PORT")]),t._v(" are to be changed accordingly.")]),t._v(" "),s("h2",{attrs:{id:"electrum-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#electrum-configuration"}},[t._v("#")]),t._v(" Electrum Configuration")]),t._v(" "),s("p",[t._v("Run:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/electrumx-1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" /electrumdb/RICK\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("USERNAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /electrumdb/RICK\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nano")]),t._v(" /etc/electrumx_RICK.conf\n")])])]),s("p",[t._v("Get your "),s("code",[t._v("RPC_USER")]),t._v(", "),s("code",[t._v("RPC_PASS")]),t._v(" and "),s("code",[t._v("RPC_PORT")]),t._v(" from your conf file, e.g.  "),s("code",[t._v("~/.komodo/RICK/RICK.conf")]),t._v(", then add them as below:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("COIN = Rick\nDB_DIRECTORY = /electrumdb/RICK\nDAEMON_URL = http://<RPC_USER>:<RPC_PASS>@127.0.0.1:<RPC_PORT>/\nSERVICES = tcp://:<ELECTRUM_TCP_PORT>,rpc://:<ELECTRUM_RPC_PORT>,wss://:<ELECTRUM_WSS_PORT>,ssl://:<ELECTRUM_SSL_PORT>\nEVENT_LOOP_POLICY = uvloop\nPEER_DISCOVERY = self\nMAX_SESSIONS = 1000\nMAX_SEND = 2000000\nINITIAL_CONCURRENT = 50\nCOST_SOFT_LIMIT = 0\nCOST_HARD_LIMIT = 0\nMAX_SEND = 2000000\nBANDWIDTH_UNIT_COST = 10000\n\n# Required for WSS or SSL services\nSSL_CERTFILE=/etc/letsencrypt/live/<YOUR_DOMAIN_NAME>/fullchain.pem   \nSSL_KEYFILE=/etc/letsencrypt/live/<YOUR_DOMAIN_NAME>/privkey.pem      \n")])])]),s("p",[t._v("You can read more about the available environment variables in the "),s("a",{attrs:{href:"https://electrumx.readthedocs.io/en/latest/environment.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ElectrumX Docs"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Change the "),s("code",[t._v("SERVICES")]),t._v(" as required, and allow the "),s("code",[t._v("SERVICES")]),t._v(" ports through your firewall. E.g. "),s("code",[t._v("sudo ufw allow <ELECTRUM_WSS_PORT>")])]),t._v(" "),s("p",[t._v("For listing on AtomicDEX, wss (websocket) and ssl (secure socket) will be required. Please refer to the "),s("a",{attrs:{href:"https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal",target:"_blank",rel:"noopener noreferrer"}},[t._v("EFF Certbot instructions"),s("OutboundLink")],1),t._v(" for details on setting up SSL certificates (this varies depending on OS and installed web server).")]),t._v(" "),s("p",[t._v("For example, using Ubuntu 20.04 and NGINX:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" snap "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" snap refresh core\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" remove certbot\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" snap "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--classic")]),t._v(" certbot\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v(" /snap/bin/certbot /usr/bin/certbot\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" certbot "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--nginx")]),t._v("\n")])])]),s("p",[t._v("Will create a cert file and key file, and update your nginx "),s("code",[t._v("sites-enabled")]),t._v(" config.\nAdd the path to these files in "),s("code",[t._v("/etc/electrumx_RICK.conf")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"configure-as-a-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-as-a-service"}},[t._v("#")]),t._v(" Configure as a service")]),t._v(" "),s("p",[t._v("Run:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" ~/electrumx-1/contrib/systemd/electrumx.service /etc/systemd/system/electrumx_RICK.service\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nano")]),t._v(" /etc/systemd/system/electrumx_RICK.service\n")])])]),s("p",[t._v("Update the following fields in the file (leave the rest as it is):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Description=Electrumx_RICK\nEnvironmentFile=/etc/electrumx_RICK.conf\nExecStart=/home/<username>/electrumx-1/electrumx_server\nUser=<username>\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl start electrumx_RICK\n")])])]),s("p",[t._v("To check its status:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl status electrumx_RICK\n")])])]),s("p",[t._v("To review it's logs:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" electrumx_RICK.service "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--since")]),t._v(" today\n")])])]),s("h2",{attrs:{id:"confirm-the-server-is-running"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#confirm-the-server-is-running"}},[t._v("#")]),t._v(" Confirm the server is running")]),t._v(" "),s("p",[t._v("To issue commands to the electrum server from a local terminal use (change the transaction ID below to one valid for the chain)")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"method":"blockchain.transaction.get","params":["8e3293602465cf6d234fda4a2bb13affb4b5a3fb5bd46eb11a14ed72ac1836e0", true],"id":"test"}\'')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ELECTRUM_SERVER_IP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ELECTRUM_TCP_PORT"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("To confirm websockets are running:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" websocket\n\nws "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" websocket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WebSocket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nws"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wss://<YOUR_DOMAIN_NAME>:<ELECTRUM_WSS_PORT>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nws"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"method":"blockchain.transaction.get","params":["8e3293602465cf6d234fda4a2bb13affb4b5a3fb5bd46eb11a14ed72ac1836e0", true],"id":"test"}\'')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ws"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nws"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"maintainence"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maintainence"}},[t._v("#")]),t._v(" Maintainence")]),t._v(" "),s("p",[t._v("To keep your electrum server running smoothly, it is recommended to compact the database once a week. We can do this with a "),s("a",{attrs:{href:"https://crontab.guru/",target:"_blank",rel:"noopener noreferrer"}},[t._v("crontab"),s("OutboundLink")],1),t._v(" entry as below:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" * * "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl stop electrumx_RICK "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("COIN")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Rick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DB_DIRECTORY")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/electrumdb/RICK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" /home/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("USERNAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/electrumx-1/electrumx_compact_history "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl start electrumx_RICK\n")])])]),s("p",[t._v("This means that every Wednesday at 3:33am, we'll stop the electrum service, compact the database, then restart the service. You should change the day of week for each of your electrum servers so that they dont all go down for maintainence at the same time.")])])}),[],!1,null,null,null);s.default=n.exports}}]);